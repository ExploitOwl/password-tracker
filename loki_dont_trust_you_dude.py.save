import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import os
import base64
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.fernet import Fernet

# Constants and paths
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
IMG_DIR = BASE_DIR
VAULT_FILE = os.path.join(BASE_DIR, "loki_secret_stash.enc")
SALT_FILE = os.path.join(BASE_DIR, "vault_salt.bin")

# Tk root setup
root = tk.Tk()
root.title("ACCESS REQUIRED")
root.geometry("300x180")

label = tk.Label(root, text="Master Password:")
label.pack(pady=10)

entry = tk.Entry(root, show="*", width=30)
entry.pack()

# Encryption helpers
def get_salt():
    if os.path.exists(SALT_FILE):
        with open(SALT_FILE, "rb") as f:
            return f.read()
    else:
        salt = os.urandom(16)
        with open(SALT_FILE, "wb") as f:
            f.write(salt)
        return salt

def derive_key(password: str, salt: bytes) -> bytes:
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=390000,
        backend=default_backend()
    )
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))

def encrypt_data(data: str, fernet: Fernet) -> bytes:
    return fernet.encrypt(data.encode())

def decrypt_data(token: bytes, fernet: Fernet) -> str:
    return fernet.decrypt(token).decode()

# Save encrypted vault entry
def save_encrypted_entry(entry_text: str):
    global fernet
    if os.path.exists(VAULT_FILE):
        with open(VAULT_FILE, "rb") as f:
            encrypted = f.read()
        try:
            decrypted = decrypt_data(encrypted, fernet)
        except Exception:
            decrypted = ""
    else:
        decrypted = ""

    decrypted += entry_text + "\n"
    encrypted = encrypt_data(decrypted, fernet)
    with open(VAULT_FILE, "wb") as f:
        f.write(encrypted)

# View decrypted vault contents
def view_vault():
    if not os.path.exists(VAULT_FILE):
        messagebox.showinfo("Vault Empty", "No saved entries yet.")
        return
    with open(VAULT_FILE, "rb") as f:
        encrypted = f.read()
    try:
        decrypted = decrypt_data(encrypted, fernet)
        vault_window = tk.Toplevel(root)
        vault_window.title("Password Vault")
        text = tk.Text(vault_window, width=60, height=20)
        text.pack(padx=10, pady=10)
        text.insert(tk.END, decrypted)
        text.config(state=tk.DISABLED)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to decrypt vault: {str(e)}")

# Show denial image window
    from PIL import Image, ImageTk

def show_denial_image():
    denial_window = tk.Toplevel(root)
    denial_window.title("Access Denied, Self Destruct Imminent")
    denial_window.geometry("400x400")
    denial_window.resizable(False, False)
    denial_window.configure(bg="white")  # White background for the window

    img_path = os.path.join(IMG_DIR, "skull.png")

    try:
        original_img = Image.open(img_path).resize((350, 350), Image.Resampling.LANCZOS)
    except FileNotFoundError:
        tk.Label(denial_window, text="Image not found", fg="red").pack(pady=50)
        return

    canvas = tk.Canvas(denial_window, width=350, height=350, bg="white", highlightthickness=0)
    canvas.pack(pady=10)

    angle = 0
    img_obj = None

    def rotate():
        nonlocal angle, img_obj
        rotated = original_img.rotate(angle)
        img_obj = ImageTk.PhotoImage(rotated)
        canvas.delete("all")
        canvas.create_image(175, 175, image=img_obj)
        angle = (angle + 5) % 360
        denial_window.after(50, rotate)

    rotate()

# Open vault UI after successful login
def open_vault():
    vault_window = tk.Toplevel(root)
    vault_window.title("Secure Vault")
    vault_window.geometry("400x400")
    vault_window.configure(bg="black")

    label_style = {"bg": "black", "fg": "red"}
    entry_style = {"bg": "black", "fg": "red", "insertbackground": "red"}

    # Tier dropdown
    tk.Label(vault_window, text="Select Tier:", **label_style).pack(pady=(10, 0))
    tier_var = tk.StringVar(vault_window)
    tier_var.set("Personal")
    tier_dropdown = tk.OptionMenu(vault_window, tier_var, "Personal", "Work", "Admin")
    tier_dropdown.config(bg="black", fg="red", highlightbackground="black")
    tier_dropdown["menu"].config(bg="black", fg="red")
    tier_dropdown.pack(pady=5)

    # Site entry
    tk.Label(vault_window, text="Site:", **label_style).pack()
    site_entry = tk.Entry(vault_window, width=40, **entry_style)
    site_entry.pack()

    # Username entry
    tk.Label(vault_window, text="Username:", **label_style).pack()
    user_entry = tk.Entry(vault_window, width=40, **entry_style)
    user_entry.pack()

    # Password entry
    tk.Label(vault_window, text="Password:", **label_style).pack()
    pass_entry = tk.Entry(vault_window, width=40, show="*", **entry_style)
    pass_entry.pack()

    def save_entry():
        site = site_entry.get()
        user = user_entry.get()
        password = pass_entry.get()
        tier = tier_var.get()

        if not all([site, user, password]):
            messagebox.showerror("Error", "Please fill in all fields!")
            return
        entry_line = f"[{tier}] {site} | Username: {user} | Password: {password}"
        try:
            save_encrypted_entry(entry_line)
            print(f"[+] Saved: {entry_line}")
            messagebox.showinfo("Saved", f"Saved credentials for {site} under {tier}.")

            site_entry.delete(0, tk.END)
            user_entry.delete(0, tk.END)
            pass_entry.delete(0, tk.END)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save: {str(e)}")

    tk.Button(vault_window, text="Save Entry", bg="black", fg="red", command=save_entry).pack(pady=10)
    tk.Button(vault_window, text="View Vault", bg="black", fg="red", command=view_vault).pack(pady=5)

# Check master password, set up encryption key
def check_password():
    global fernet
    master_password = entry.get()
    if not master_password:
        messagebox.showerror("Error", "Enter the master password.")
        return

    salt = get_salt()
    key = derive_key(master_password, salt)
    fernet = Fernet(key)

    # Try decrypting vault with key to verify password correctness (optional)
    if os.path.exists(VAULT_FILE):
        with open(VAULT_FILE, "rb") as f:
            encrypted = f.read()
        try:
            decrypt_data(encrypted, fernet)  # just test if it decrypts
        except Exception:
            messagebox.showerror("You FORGOT Again.")
            show_denial_image()
            return

    messagebox.showinfo("Access Granted", "What'd you forget this time?")
    open_vault()

submit_btn = tk.Button(root, text="Submit", command=check_password, bg="black", fg="red")
submit_btn.pack(pady=10)

root.mainloop()
